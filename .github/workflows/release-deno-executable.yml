name: release-deno-executable
on:
  workflow_call:
    inputs:
      executable-name:
        required: true
        type: string
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-latest, windows-latest, ubuntu-latest]
    steps:
      - name: Test Deno
        uses: flowscripter/.github/actions/run-deno-tests@v1
        with:
          codecov-token: ${{ secrets.CODECOV_TOKEN }}
  test-deno-executable:
    runs-on: ${{ matrix.os }}
    needs:
      - test
    strategy:
      matrix:
        os: [macOS-latest, windows-latest, ubuntu-latest]
    steps:
      - name: Test Deno Executable
        uses: flowscripter/.github/actions/run-deno-executable-tests@v1
  release:
    runs-on: ubuntu-latest
    needs:
      - test-deno-executable
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Perform release
        run: |
          cat <<EOT > .releaserc
          ---
          branches:
            - main
          plugins:
            - - "@semantic-release/commit-analyzer"
              - preset: conventionalcommits
            - - "@semantic-release/release-notes-generator"
              - preset: conventionalcommits
            - - "@semantic-release/github"
            - - "@sebbo2002/semantic-release-jsr"
            - - "@semantic-release/git"
              - assets: 
                - deno.json
          EOT
          deno install
          npm install conventional-changelog-conventionalcommits @semantic-release/git @sebbo2002/semantic-release-jsr
          npx semantic-release
        shell: bash
        env:
          GITHUB_ACTION: yes
          GITHUB_TOKEN: ${{ secrets.PUSH_TO_MAIN_TOKEN }}
  release-linux:
    runs-on: ubuntu-latest
    needs:
      - release
    permissions:
      contents: write
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      - name: Compile Linux
        run: |
          mkdir ${{ runner.temp }}/x86_64-unknown-linux-gnu
          deno compile --frozen --allow-env --target x86_64-unknown-linux-gnu --output ${{ runner.temp }}/${{ inputs.executable-name }} mod.ts
          zip -j ${{ runner.temp }}/x86_64-unknown-linux-gnu/${{ inputs.executable-name }}.zip ${{ runner.temp }}/x86_64-unknown-linux-gnu/${{ inputs.executable-name }}
        shell: bash
      - name: Release Linux
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ runner.temp }}/x86_64-unknown-linux-gnu/${{ inputs.executable-name }}.zip
  release-windows:
    runs-on: windows-latest
    needs:
      - release
    permissions:
      contents: write
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      - name: Compile Windows
        run: |
          mkdir ${{ runner.temp }}/x86_64-pc-windows-msvc
          deno compile --frozen --allow-env --target x86_64-pc-windows-msvc --output ${{ runner.temp }}/x86_64-pc-windows-msvc/${{ inputs.executable-name }} mod.ts
        shell: bash
      - name: Sign Windows
        uses: skymatic/code-sign-action@v1
        with:
          certificate: '${{ secrets.WINDOWS_CODESIGN_CERTIFICATE_P12_BASE64 }}'
          password: '${{ secrets.WINDOWS_CODESIGN_CERTIFICATE_PASSWORD }}'
          certificatesha1: '${{ secrets.WINDOWS_CODESIGN_CERTIFICATE_SHA1 }}'
          folder: ${{ runner.temp }}/x86_64-pc-windows-msvc/${{ inputs.executable-name }}.exe
      - name: Zip Windows
        run: |
          zip -j ${{ runner.temp }}/x86_64-pc-windows-msvc/${{ inputs.executable-name }}.zip ${{ runner.temp }}/x86_64-pc-windows-msvc/${{ inputs.executable-name }}.exe
        shell: bash
      - name: Release Windows
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ runner.temp }}/x86_64-pc-windows-msvc/${{ inputs.executable-name }}.zip
  release-macos:
    runs-on: macos-latest
    needs:
      - release
    permissions:
      contents: write
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      - name: Compile MacOS
        run: |
          mkdir ${{ runner.temp }}/aarch64-apple-darwin
          deno compile --frozen --allow-env --target aarch64-apple-darwin --output ${{ runner.temp }}/aarch64-apple-darwin/${{ inputs.executable-name }} mod.ts
        shell: bash
      - name: Install App Store Connect API Key
        run: |
          mkdir -p private_keys/
          echo '${{ secrets.APPLE_APP_STORE_CONNECT_KEY_PEM }}' | tr ' ' '\n' > private_keys/AuthKey_${{ secrets.APPLE_APP_STORE_CONNECT_API_KEY_ID }}.p12
        shell: bash
      - name: Write signing certificate
        run: |
          echo '${{ secrets.APPLE_CODESIGN_CERTIFICATE_P12_BASE64 }}' > codesign_cert.p12.base64
          base64 -d -i codesign_cert.p12.base64 -o codesign_cert.p12
        shell: bash
      - name: Sign and Notarize
        uses: indygreg/apple-code-sign-action@v1
        with:
          input_path: ${{ runner.temp }}/aarch64-apple-darwin/${{ inputs.executable-name }}
          notarize: true
          staple: true
          p12_file: codesign_cert.p12
          p12_password: ${{ secrets.APPLE_CODESIGN_CERTIFICATE_PASSWORD }}
          app_store_connect_api_issuer: ${{ secrets.APPLE_APP_STORE_CONNECT_API_ISSUER_UUID }}
          app_store_connect_api_key: ${{ secrets.APPLE_APP_STORE_CONNECT_API_KEY_ID }}
      - name: Zip MacOS
        run: |
          zip -j ${{ runner.temp }}/aarch64-apple-darwin/${{ inputs.executable-name }}.zip ${{ runner.temp }}/aarch64-apple-darwin/${{ inputs.executable-name }}
        shell: bash
      - name: Release MacOS
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ runner.temp }}/aarch64-apple-darwin/${{ inputs.executable-name }}.zip
