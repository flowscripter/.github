name: release-bun-rust-library
on:
  workflow_call
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Check Bun Source
        uses: flowscripter/.github/actions/check-bun-rust-source@v1
        with:
          codecov-token: ${{ secrets.CODECOV_TOKEN }}
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-latest, windows-latest, ubuntu-latest]
    steps:
      - name: Run Bun Tests
        uses: flowscripter/.github/actions/run-bun-rust-tests@v1
  release:
    runs-on: ubuntu-latest
    needs:
      - test
      - check
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
      pages: write
    concurrency:
      group: "release"
      cancel-in-progress: false
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "latest"
      - name: Perform release
        run: |
          cat <<EOT > .releaserc
          ---
          branches:
            - main
          plugins:
            - - "@semantic-release/commit-analyzer"
              - preset: conventionalcommits
            - - "@semantic-release/release-notes-generator"
              - preset: conventionalcommits
            - - "@semantic-release/exec"
              - verifyConditionsCmd: "semantic-release-rust verify-conditions"
                prepareCmd: "semantic-release-rust prepare \${nextRelease.version} && cargo check && jq '.ffiLibBaseUri = https://github.com/${{ github.repository }}/releases/download/v\${nextRelease.version}' package.json > temp.json && mv temp.json package.json"
                publishCmd: "cargo publish --no-verify"
            - - "@semantic-release/github"
            - - "@semantic-release/npm"
            - - "@semantic-release/git"
              - assets: 
                - Cargo.toml
                - Cargo.lock
                - package.json
          EOT
          bun add --no-save conventional-changelog-conventionalcommits @semantic-release/exec @semantic-release/git
          bunx semantic-release
        shell: bash
        env:
          GITHUB_ACTION: yes
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.PUSH_TO_MAIN_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      - name: Generate docs
        run: deno doc --html --name=$(basename ${{ github.repository }}) index.ts
        shell: bash
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs/'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
  release-linux:
    runs-on: ubuntu-latest
    needs:
      - release
    permissions:
      contents: write
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "latest"
      - name: Compile Linux
        run: |
          cargo build --release
        shell: bash
      - name: Release Linux
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: target/release/*.so
  release-windows:
    runs-on: windows-latest
    needs:
      - release
    permissions:
      contents: write
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "latest"
      - name: Compile Windows
        run: |
          cargo build --release
          export PACKAGE_NAME=$(yq -r '.package.name' Cargo.toml)
        shell: bash
# - name: Sign Windows
#   uses: skymatic/code-sign-action@v1
#   with:
#     certificate: '${{ secrets.WINDOWS_CODESIGN_CERTIFICATE_P12_BASE64 }}'
#     password: '${{ secrets.WINDOWS_CODESIGN_CERTIFICATE_PASSWORD }}'
#     certificatesha1: '${{ secrets.WINDOWS_CODESIGN_CERTIFICATE_SHA1 }}'
#     folder: target/release/*.dll
      - name: Release Windows
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: target/release/*.dll
  release-macos:
    runs-on: macos-latest
    needs:
      - release
    permissions:
      contents: write
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "latest"
      - name: Compile MacOS
        run: |
          cargo build --release
        shell: bash
# - name: Install App Store Connect API Key
#   run: |
#     mkdir -p private_keys/
#     echo '${{ secrets.APPLE_APP_STORE_CONNECT_KEY_PEM }}' | tr ' ' '\n' > private_keys/AuthKey_${{ secrets.APPLE_APP_STORE_CONNECT_API_KEY_ID }}.p12
#   shell: bash
# - name: Write signing certificate
#   run: |
#     echo '${{ secrets.APPLE_CODESIGN_CERTIFICATE_P12_BASE64 }}' > codesign_cert.p12.base64
#     base64 -d -i codesign_cert.p12.base64 -o codesign_cert.p12
#   shell: bash
# - name: Sign and Notarize
#   uses: indygreg/apple-code-sign-action@v1
#   with:
#     input_path: target/release/*.dylib
#     notarize: true
#     staple: true
#     p12_file: codesign_cert.p12
#     p12_password: ${{ secrets.APPLE_CODESIGN_CERTIFICATE_PASSWORD }}
#     app_store_connect_api_issuer: ${{ secrets.APPLE_APP_STORE_CONNECT_API_ISSUER_UUID }}
#     app_store_connect_api_key: ${{ secrets.APPLE_APP_STORE_CONNECT_API_KEY_ID }}
      - name: Release MacOS
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: target/release/*.dylib
  