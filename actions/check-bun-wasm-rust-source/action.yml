name: check-bun-wasm-rust-source
description: 'Check Bun and Rust (WASM) Source'
inputs:
  codecov-token:
    description: 'Codecov token'
    required: false # if not provided codecov will not be run
runs:
  using: "composite"
  steps:
    - name: Checkout source
      uses: actions/checkout@v4
    - name: Install Deno
      uses: denoland/setup-deno@v2
      with:
        deno-version: v2.x
    - name: Install Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: "latest"
    - name: Bun Install
      run: bun install
      shell: bash
      env:
        GITHUB_NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Setup and Run Clippy and Cargo Audit
      run: |
        rustup default nightly
        cargo install cargo-audit grcov wasm-pack
        rustup component add clippy
        rustup component add llvm-tools-preview
        cargo clippy
        cargo audit
      shell: bash
    - name: Lint
      run: deno lint index.ts src/ tests/
      shell: bash 
    - name: Format
      run: |
        deno fmt --check
        rustup component add rustfmt
        cargo fmt -- --check
      shell: bash 
    - name: Generate docs
      run: deno doc --html --name=$(basename ${{ github.repository }}) index.ts
      shell: bash
    - name: Run Rust tests
      run: |
        cargo test
        grcov . --binary-path ./target/debug -s . -t lcov --branch -o ./coverage.lcov
      shell: bash
      env:
        RUSTFLAGS: -Cinstrument-coverage
        LLVM_PROFILE_FILE: "%p-%m.profraw"
    - name: Compile
      run: wasm-pack build --target web --no-pack
      shell: bash
    - name: Run Deno tests
      run: bun test --coverage --coverage-reporter=lcov > coverage-bun.lcov
      shell: bash
    - name: Publish Deno Rust coverage report
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.lcov,./coverage-bun.lcov
      env:
        CODECOV_TOKEN: ${{ inputs.codecov-token }}
      if: inputs.codecov-token != ''
